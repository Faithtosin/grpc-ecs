AWSTemplateFormatVersion: 2010-09-09
Description: grpc stack
Parameters:
  ENV:
    Type: String
    Default: development
    AllowedValues:
      - development
      - production
  ContainerPort: 
    Type: Number
    Default: 50051
  HostPort: 
    Type: Number
    Default: 50051
  
  EcrAddress:
    Type: String
    Description: enter ecr address like XXXXXXX.dkr.ecr.us-east-1.amazonaws.com
  
  EcrName:
    Type: String
    Default: grpc-repo

  CertId:
    Type: String
    Description: ID of ssl certificate in ACM
    Default: xxxxxxxx

  AppMeshMeshName:
    Type: String 
    Description: Name of mesh
    Default: GrpcMesh

  NamespaceName:
    Type: String
    Description: local DNS name
    Default: local
  ClientServiceEndpoint:
    Type: String
    Description: client local Dns
    Default: frontend

  ServerServiceEndpoint:
    Type: String
    Description: client local Dns
    Default: greeter_server

  VPCid:
    Type: String 
    Default: vpc-059fa6c20ceedd1f6
  
  SGIds:
    Type: String 
    Default: 'sg-0466da81c58413908'
  
  PubSubNetIds:
    Type: String 
    Default: 'subnet-05309765a00dc7cd0,subnet-0dd11feb519ed8ae9,subnet-05c5f8a23db600755'

Conditions:
  CreateProdResources: !Equals
    - !Ref ENV
    - production
  CreateDevResources: !Equals
    - !Ref ENV
    - development
    
Mappings:
  Cluster:
    name:
      development: grpc-sample-cluster-dev
      production: grpc-sample-cluster-prod
  
  ClientTaskDefinition:
    name:
      development: grpc-client-task-dev 
      production: grpc-client-task-prod
  ClientContainer:
    name:
      development: grpc-client-container-dev
      production: grpc-client-container-prod
  ClientService:
    name:
      development: grpc-client-service-dev
      production: grpc-client-service-prod
  ClusterTargetGroup:
    name:
      development: grpc-client-tgroup-dev
      production: grpc-client-tgroup-prod
  ALB:
    name:
      development: grpc-client-alb-dev
      production: grpc-client-alb-prod

  ServerTaskDefinition:
    name:
      development: grpc-server-task-dev 
      production: grpc-server-task-prod
  ServerContainer:
    name:
      development: grpc-server-container-dev
      production: grpc-server-container-prod
  ServerService:
    name:
      development: grpc-server-service-dev
      production: grpc-server-service-prod


Resources:
#Task IAM Role
  TaskDefRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: [arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy]
  
#ECS Cluster      
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !FindInMap [Cluster, name, !Ref ENV]

#ECS Fargate Task Definition
  ClientTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: [CloudwatchLogsGroup,ClientNode, TaskDefRole]
    Properties:
      Family: !FindInMap [ClientTaskDefinition, name, !Ref ENV]
      ContainerDefinitions:
        - Name: !FindInMap [ClientContainer, name, !Ref ENV]
          DependsOn: 
            - Condition: HEALTHY
              ContainerName: envoy
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Sub ${AWS::StackName}-ecs-dev
          PortMappings:
            - HostPort: !Ref HostPort
              Protocol: tcp
              ContainerPort: !Ref ContainerPort
          Cpu: '100'
          Image: !Sub '${EcrAddress}/${EcrName}:greeter_client'
          Essential: true
          Environment:
            - Name: GREETER_ENDPOINT
              Value: !Sub ${ServerServiceEndpoint}.${NamespaceName}:50051
        - Name: envoy
          User: "1337"
          HealthCheck:
            Command: 
              - "CMD-SHELL" 
              - !Sub "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE"
            Interval: 5
            Retries: 3
            StartPeriod: 10
            Timeout: 2
          Memory: 500
          Image: '840364872350.dkr.ecr.us-east-1.amazonaws.com/aws-appmesh-envoy:v1.16.1.1-prod'
          Essential: true
          Environment:
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value: !Sub 
                - mesh/${AppMeshMeshName}/virtualNode/${VirtualNodeName}
                - VirtualNodeName: !GetAtt ClientNode.VirtualNodeName
      ExecutionRoleArn: !GetAtt TaskDefRole.Arn
      TaskRoleArn: !GetAtt TaskDefRole.Arn
      ProxyConfiguration:
        Type: APPMESH
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: ProxyIngressPort
            Value: 15000
          - Name: AppPorts
            Value: !Ref ContainerPort
          - Name: EgressIgnoredIPs
            Value: "169.254.170.2,169.254.169.254"
          - Name: IgnoredUID
            Value: 1337
          - Name: ProxyEgressPort
            Value: 15001
      Memory: '512'
      NetworkMode: awsvpc
      Cpu: '256'
      RequiresCompatibilities:
        - 'FARGATE'  

#ECS Fargate Task Definition
  ServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: [CloudwatchLogsGroup, ServerNode, TaskDefRole]
    Properties:
      Family: !FindInMap [ServerTaskDefinition, name, !Ref ENV]
      ContainerDefinitions:
        - Name: !FindInMap [ServerContainer, name, !Ref ENV]
          DependsOn: 
            - Condition: HEALTHY
              ContainerName: envoy
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Sub ${AWS::StackName}-ecs-dev
          PortMappings:
            - HostPort: !Ref HostPort
              Protocol: tcp
              ContainerPort: !Ref ContainerPort
          Cpu: '100'
          Image: !Sub '${EcrAddress}/${EcrName}:greeter_server'
          Essential: true
        - Name: envoy
          User: "1337"
          HealthCheck:
            Command: 
              - "CMD-SHELL" 
              - !Sub "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE"
            Interval: 5
            Retries: 3
            StartPeriod: 10
            Timeout: 2
          Memory: 500
          Image: '840364872350.dkr.ecr.us-east-1.amazonaws.com/aws-appmesh-envoy:v1.16.1.1-prod'
          Essential: true
          Environment:
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value: !Sub 
                - mesh/${AppMeshMeshName}/virtualNode/${VirtualNodeName}
                - VirtualNodeName: !GetAtt ServerNode.VirtualNodeName
      ExecutionRoleArn: !GetAtt TaskDefRole.Arn
      TaskRoleArn: !GetAtt TaskDefRole.Arn
      ProxyConfiguration:
        Type: APPMESH
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: ProxyIngressPort
            Value: 15000
          - Name: AppPorts
            Value: !Ref ContainerPort
          - Name: EgressIgnoredIPs
            Value: "169.254.170.2,169.254.169.254"
          - Name: IgnoredUID
            Value: 1337
          - Name: ProxyEgressPort
            Value: 15001
      Memory: '512'
      NetworkMode: awsvpc
      Cpu: '256'
      RequiresCompatibilities:
        - 'FARGATE'  


  #ECS Service
  ClientService:
    Type: AWS::ECS::Service
    DependsOn: [ClientServiceDiscovery]
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      ServiceRegistries:
        - ContainerName: !FindInMap [ClientContainer, name, !Ref ENV]
          RegistryArn: !GetAtt ClientServiceDiscovery.Arn
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '100'
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: !FindInMap [ClientContainer, name, !Ref ENV]
        ContainerPort: !Ref ContainerPort
        TargetGroupArn: !Ref 'ECSTG'
      LaunchType: FARGATE
      TaskDefinition: !Ref ClientTaskDefinition
      #PlatformVersion: 1.3.0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: !Split [ ",", !Ref SGIds ]
          Subnets: !Split [ ",", !Ref PubSubNetIds ]
      ServiceName: !FindInMap [ClientService, name, !Ref ENV]

  #Target Group for ECS
  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Name: !FindInMap [ClusterTargetGroup, name, !Ref ENV]
      Port: !Ref HostPort
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPCid 

#Load Balancer
  ECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !FindInMap [ALB, name, !Ref ENV]
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: !Split [ ",", !Ref PubSubNetIds ]
      SecurityGroups: !Split [ ",", !Ref SGIds ]



  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: CreateProdResources
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref 'ECSALB'
      Port: 80
      Protocol: "HTTP"

  #ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateProdResources
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      Certificates: 
        - CertificateArn:  !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertId}
      LoadBalancerArn: !Ref 'ECSALB'
      Port: '443'
      Protocol: HTTPS

  ALBListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateDevResources
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      LoadBalancerArn: !Ref 'ECSALB'
      Port: '80'
      Protocol: HTTP
  
  #ALB Listener Rule
  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: CreateProdResources
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBListener'
      Priority: 1
  
  ECSALBListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: CreateDevResources
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSTG'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'ALBListener2'
      Priority: 1

 
  ServerService:
    Type: AWS::ECS::Service
    DependsOn: [ServerServiceDiscovery]
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      ServiceRegistries:
        - ContainerName: !FindInMap [ServerContainer, name, !Ref ENV]
          RegistryArn: !GetAtt ServerServiceDiscovery.Arn
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '100'
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref ServerTaskDefinition
      #PlatformVersion: 1.3.0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: !Split [ ",", !Ref SGIds ]
          Subnets: !Split [ ",", !Ref PubSubNetIds ]
      ServiceName: !FindInMap [ServerService, name, !Ref ENV]
  


  DNSNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Ref NamespaceName
      Vpc: !Ref VPCid
  

  ServerServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        RoutingPolicy: WEIGHTED
        DnsRecords:
          - Type: A
            TTL: 60
      Name: !Ref ServerServiceEndpoint
      NamespaceId: !GetAtt DNSNamespace.Id
  
  ClientServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        RoutingPolicy: WEIGHTED
        DnsRecords:
          - Type: A
            TTL: 60
      Name: !Ref ClientServiceEndpoint
      NamespaceId: !GetAtt DNSNamespace.Id 


  
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 7
  
  AppMesh:
    Type: "AWS::AppMesh::Mesh"
    Properties:
      MeshName: !Ref AppMeshMeshName
      Spec:
        EgressFilter:
          Type: "ALLOW_ALL"
  
  ServerNode:
    Type: AWS::AppMesh::VirtualNode
    DependsOn: [AppMesh]
    Properties:
      MeshName: !Ref AppMeshMeshName
      VirtualNodeName: grpc-server-vn
      Spec:
        Listeners:
          - PortMapping:
              Port: !Ref ContainerPort
              Protocol: grpc
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: local
            ServiceName: greeter_server
  
  ClientNode:
    Type: AWS::AppMesh::VirtualNode
    DependsOn: [AppMesh]
    Properties:
      MeshName: !Ref AppMeshMeshName
      VirtualNodeName: grpc-client-vn
      Spec:
        Listeners:
          - PortMapping:
              Port: !Ref ContainerPort
              Protocol: grpc
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: local
            ServiceName: greeter_client
  

