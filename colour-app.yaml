AWSTemplateFormatVersion: 2010-09-09
Description: grpc stack
Parameters:
  ENV:
    Type: String
    Default: development
    AllowedValues:
      - development
      - production
  ContainerPort: 
    Type: Number
    Default: 50051
  HostPort: 
    Type: Number
    Default: 50051
  
  AppMeshMeshName:
    Type: String 
    Description: Name of mesh
    Default: GrpcMesh
  


    
Mappings:
  Cluster:
    name:
      development: grpc-sample-cluster-dev
      production: grpc-sample-cluster-prod
  
  ClientTaskDefinition:
    name:
      development: grpc-client-task-dev 
      production: grpc-client-task-prod
  ClientContainer:
    name:
      development: grpc-client-container-dev
      production: grpc-client-container-prod
  ClientService:
    name:
      development: grpc-client-service-dev
      production: grpc-client-service-prod

  ServerTaskDefinition:
    name:
      development: grpc-server-task-dev 
      production: grpc-server-task-prod
  ServerContainer:
    name:
      development: grpc-server-container-dev
      production: grpc-server-container-prod
  ServerService:
    name:
      development: grpc-server-service-dev
      production: grpc-server-service-prod
  RegistryName:
    name:
      development: grpc-server-registry-dev
      production: grpc-server-registry-prod
  VPCid:
    name:
      development: vpc-d27062a8
      production: ''
      
  UISGIds:
    name:
      development: 'sg-e1a6fac2'
      production: ''
      
  PrivSubNetIds:
    name:
      development: 'subnet-d356eedd,subnet-41478a60,subnet-e6aea4d8'
      production: ''
      
  PubSubNetIds:
    name:
      development: 'subnet-d356eedd,subnet-41478a60,subnet-e6aea4d8'
      production: ''
      
  #!Split [ ",", !FindInMap [PubSubNetIds, name, !Ref ENV] ]

Resources:
#ECS Cluster      
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !FindInMap [Cluster, name, !Ref ENV]

#ECS Fargate Task Definition
  ClientTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: [CloudwatchLogsGroup,ClientNode]
    Properties:
      Family: !FindInMap [ClientTaskDefinition, name, !Ref ENV]
      ContainerDefinitions:
        - Name: !FindInMap [ClientContainer, name, !Ref ENV]
          DependsOn: 
            - Condition: HEALTHY
              ContainerName: envoy
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Sub ${AWS::StackName}-ecs-dev
          PortMappings:
            - HostPort: !Ref HostPort
              Protocol: tcp
              ContainerPort: !Ref ContainerPort
          Cpu: '100'
          Image: 'docker/getting-started'
          Essential: false
          Environment:
            - Name: GREETER_ENDPOINT
              Value: greeter_server.local:50051
        - Name: envoy
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Sub ${AWS::StackName}-ecs-dev
          User: "1337"
          HealthCheck:
            Command: 
              - "CMD-SHELL" 
              - !Sub '"curl -s http://localhost:9901/server_info | grep state | grep -q LIVE"'
          Image: '840364872350.dkr.ecr.us-east-1.amazonaws.com/aws-appmesh-envoy:v1.16.1.1-prod'
          Essential: true
          Environment:
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value: !Sub "mesh/${AppMesh}/virtualNode/grpc-client-vn"
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole
      ProxyConfiguration:
        Type: APPMESH
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: ProxyIngressPort
            Value: 15000
          - Name: AppPorts
            Value: !Ref ContainerPort
          - Name: EgressIgnoredIPs
            Value: "169.254.170.2,169.254.169.254"
          - Name: IgnoredUID
            Value: 1337
          - Name: ProxyEgressPort
            Value: 15001
      Memory: '512'
      NetworkMode: awsvpc
      Cpu: '256'
      RequiresCompatibilities:
        - 'FARGATE'  

#ECS Fargate Task Definition
  ServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: [CloudwatchLogsGroup,ServerNode]
    Properties:
      Family: !FindInMap [ServerTaskDefinition, name, !Ref ENV]
      ContainerDefinitions:
        - Name: !FindInMap [ServerContainer, name, !Ref ENV]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Sub ${AWS::StackName}-ecs-dev
          PortMappings:
            - HostPort: !Ref HostPort
              Protocol: tcp
              ContainerPort: !Ref ContainerPort
          Cpu: '100'
          Image: 'docker/getting-started'
          Essential: true
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole
      Memory: '512'
      NetworkMode: awsvpc
      Cpu: '256'
      RequiresCompatibilities:
        - 'FARGATE'  


  #ECS Service
  ClientService:
    Type: AWS::ECS::Service
    DependsOn: [ClientServiceDiscovery]
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      ServiceRegistries:
        - ContainerName: !FindInMap [ClientContainer, name, !Ref ENV]
          RegistryArn: !GetAtt ClientServiceDiscovery.Arn
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '100'
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref ClientTaskDefinition
      #PlatformVersion: 1.3.0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: !Split [ ",", !FindInMap [UISGIds, name, !Ref ENV] ]
          Subnets: !Split [ ",", !FindInMap [PubSubNetIds, name, !Ref ENV] ]
      ServiceName: !FindInMap [ClientService, name, !Ref ENV]
  
  ServerService:
    Type: AWS::ECS::Service
    DependsOn: [ServerServiceDiscovery]
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      ServiceRegistries:
        - ContainerName: !FindInMap [ServerContainer, name, !Ref ENV]
          RegistryArn: !GetAtt ServerServiceDiscovery.Arn
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '100'
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref ServerTaskDefinition
      #PlatformVersion: 1.3.0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: !Split [ ",", !FindInMap [UISGIds, name, !Ref ENV] ]
          Subnets: !Split [ ",", !FindInMap [PubSubNetIds, name, !Ref ENV] ]
      ServiceName: !FindInMap [ServerService, name, !Ref ENV]
  


  DNSNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: local
      Vpc: !FindInMap [VPCid, name, !Ref ENV]
  

  ServerServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        RoutingPolicy: WEIGHTED
        DnsRecords:
          - Type: A
            TTL: 60
      Name: greeter_server
      NamespaceId: !GetAtt DNSNamespace.Id
  
  ClientServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        RoutingPolicy: WEIGHTED
        DnsRecords:
          - Type: A
            TTL: 60
      Name: greeter_client
      NamespaceId: !GetAtt DNSNamespace.Id 


  
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 7
  
  AppMesh:
    Type: "AWS::AppMesh::Mesh"
    Properties:
      MeshName: !Ref AppMeshMeshName
      Spec:
        EgressFilter:
          Type: "ALLOW_ALL"
  
  ServerNode:
    Type: AWS::AppMesh::VirtualNode
    DependsOn: [AppMesh]
    Properties:
      MeshName: !Ref AppMeshMeshName
      VirtualNodeName: grpc-server-vn
      Spec:
        Listeners:
          - PortMapping:
              Port: !Ref ContainerPort
              Protocol: grpc
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: local
            ServiceName: greeter_server
  
  ClientNode:
    Type: AWS::AppMesh::VirtualNode
    DependsOn: [AppMesh]
    Properties:
      MeshName: !Ref AppMeshMeshName
      VirtualNodeName: grpc-client-vn
      Spec:
        Listeners:
          - PortMapping:
              Port: !Ref ContainerPort
              Protocol: grpc
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: local
            ServiceName: greeter_client
  
  ECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      ImageTagMutability: MUTABLE
      RepositoryName: !FindInMap [RegistryName, name, !Ref ENV]
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:BatchDeleteImage'
              - 'ecr:BatchGetImage'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:DeleteLifecyclePolicy'
              - 'ecr:DeleteRepository'
              - 'ecr:DeleteRepositoryPolicy'
              - 'ecr:DescribeImages'
              - 'ecr:DescribeRepositories'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetLifecyclePolicy'
              - 'ecr:GetLifecyclePolicyPreview'
              - 'ecr:GetRepositoryPolicy'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:ListImages'
              - 'ecr:PutImage'
              - 'ecr:PutLifecyclePolicy'
              - 'ecr:SetRepositoryPolicy'
              - 'ecr:StartLifecyclePolicyPreview'
              - 'ecr:UploadLayerPart'
            Principal:
              Service:
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
                - ecs.amazonaws.com
            Effect: Allow
            Sid: new statement


